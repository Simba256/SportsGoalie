rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserId() {
      return request.auth.uid;
    }

    function isOwner(userId) {
      return isAuthenticated() && getUserId() == userId;
    }

    // SECURE: Admin validation using custom claims only
    function isAdmin() {
      return request.auth != null &&
             request.auth.token.role == 'admin';
    }

    function isStudent() {
      return isAuthenticated() &&
             request.auth.token != null &&
             request.auth.token.role == 'student';
    }

    function isOwnerOrAdmin(userId) {
      return isOwner(userId) || isAdmin();
    }

    function isEmailVerified() {
      return request.auth.token.email_verified == true;
    }

    // Helper functions for data validation
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }

    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }

    function isValidTimestamp(ts) {
      return ts is timestamp;
    }

    function isValidRole(role) {
      return role == 'student' || role == 'admin';
    }

    function isValidDifficulty(difficulty) {
      return difficulty == 'beginner' || difficulty == 'intermediate' || difficulty == 'advanced';
    }

    function isValidQuestionType(type) {
      return type == 'multiple_choice' || type == 'true_false' || type == 'descriptive' || type == 'image_choice';
    }

    function isValidNotificationType(type) {
      return type == 'progress' || type == 'quiz_result' || type == 'new_content' || type == 'reminder' || type == 'achievement' || type == 'admin_message';
    }

    function isValidMessageType(type) {
      return type == 'instruction' || type == 'feedback' || type == 'general' || type == 'video_review';
    }

    // Users collection
    match /users/{userId} {
      // Users can read their own profile, admins can read all
      allow read: if isOwnerOrAdmin(userId);

      // Users can create their own profile during registration
      // Allow creation with unverified email during registration
      allow create: if isAuthenticated() &&
                       getUserId() == userId &&
                       request.resource.data.email is string &&
                       request.resource.data.email.size() > 0 &&
                       request.resource.data.displayName is string &&
                       request.resource.data.displayName.size() > 0 &&
                       request.resource.data.role is string &&
                       (request.resource.data.role == 'student' || request.resource.data.role == 'admin') &&
                       request.resource.data.emailVerified is bool;

      // Users can update their own profile (except role and email), admins can update any
      allow update: if (isOwner(userId) &&
                       !('role' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('email' in request.resource.data.diff(resource.data).affectedKeys())) ||
                      isAdmin();

      // Only admins can delete users
      allow delete: if isAdmin();
    }

    // Sports collection (These ARE the courses - main course catalog)
    match /sports/{sportId} {
      // PUBLIC: Anyone can read courses/sports for course discovery
      allow read: if true;

      // Only admins can create, update, delete courses/sports
      allow create: if isAdmin() &&
                       hasRequiredFields(['name', 'description', 'difficulty', 'category']) &&
                       isValidDifficulty(request.resource.data.difficulty);

      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Skills collection - belongs to courses/sports
    match /skills/{skillId} {
      // PUBLIC: Anyone can read skills for course discovery
      allow read: if true;

      // Only admins can create, update, delete skills
      // Every skill MUST have a valid sportId (courseId) that exists
      allow create: if isAdmin() &&
                       hasRequiredFields(['name', 'description', 'sportId', 'difficulty']) &&
                       isValidDifficulty(request.resource.data.difficulty) &&
                       request.resource.data.sportId is string &&
                       request.resource.data.sportId.size() > 0 &&
                       exists(/databases/$(database)/documents/sports/$(request.resource.data.sportId));

      allow update: if isAdmin() &&
                       (request.resource.data.sportId == resource.data.sportId ||
                        (request.resource.data.sportId is string &&
                         request.resource.data.sportId.size() > 0 &&
                         exists(/databases/$(database)/documents/sports/$(request.resource.data.sportId))));
      allow delete: if isAdmin();
    }

    // Quizzes collection - belongs to both courses/sports and skills
    match /quizzes/{quizId} {
      // PUBLIC: Anyone can read quizzes for course discovery
      allow read: if true;

      // Only admins can manage quizzes
      // Every quiz MUST have both valid sportId (courseId) AND skillId
      allow create: if isAdmin() &&
                       hasRequiredFields(['title', 'questions', 'settings', 'difficulty', 'isActive', 'createdBy', 'sportId', 'skillId']) &&
                       request.resource.data.title is string &&
                       request.resource.data.questions is list &&
                       request.resource.data.settings is map &&
                       request.resource.data.difficulty is string &&
                       request.resource.data.isActive is bool &&
                       request.resource.data.createdBy is string &&
                       request.resource.data.sportId is string &&
                       request.resource.data.sportId.size() > 0 &&
                       request.resource.data.skillId is string &&
                       request.resource.data.skillId.size() > 0 &&
                       exists(/databases/$(database)/documents/sports/$(request.resource.data.sportId)) &&
                       exists(/databases/$(database)/documents/skills/$(request.resource.data.skillId));

      allow update: if isAdmin() &&
                       (request.resource.data.sportId == resource.data.sportId ||
                        (request.resource.data.sportId is string &&
                         request.resource.data.sportId.size() > 0 &&
                         exists(/databases/$(database)/documents/sports/$(request.resource.data.sportId)))) &&
                       (request.resource.data.skillId == resource.data.skillId ||
                        (request.resource.data.skillId is string &&
                         request.resource.data.skillId.size() > 0 &&
                         exists(/databases/$(database)/documents/skills/$(request.resource.data.skillId))));
      allow delete: if isAdmin();
    }

    // Quiz Questions collection
    match /quiz_questions/{questionId} {
      // Students can read questions (answers filtered by application layer)
      allow read: if isAuthenticated();

      // Only admins can manage quiz questions
      allow create: if isAdmin() &&
                       hasRequiredFields(['quizId', 'type', 'question', 'correctAnswer', 'points']) &&
                       isValidQuestionType(request.resource.data.type) &&
                       request.resource.data.points > 0;

      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Quiz Attempts collection
    match /quiz_attempts/{attemptId} {
      // Users can read their own attempts, admins can read all
      allow read: if isOwnerOrAdmin(resource.data.userId);

      // Users can create their own attempts
      allow create: if isAuthenticated() &&
                       isOwner(request.resource.data.userId) &&
                       hasRequiredFields(['userId', 'quizId', 'skillId', 'sportId']);

      // Users can update their own attempts, admins can update any
      allow update: if isOwnerOrAdmin(resource.data.userId);

      // Only admins can delete attempts
      allow delete: if isAdmin();
    }

    // Sport Progress collection (Course Progress - since sports ARE courses)
    match /sport_progress/{progressId} {
      // Users can read their own progress, admins can read all
      allow read: if isOwnerOrAdmin(resource.data.userId);

      // Users can create their own progress
      allow create: if isAuthenticated() &&
                       isOwner(request.resource.data.userId) &&
                       hasRequiredFields(['userId', 'sportId']);

      // Users can update their own progress, admins can update any
      allow update: if isOwnerOrAdmin(resource.data.userId);

      // Only admins can delete progress
      allow delete: if isAdmin();
    }

    // Skill Progress collection
    match /skill_progress/{progressId} {
      // Users can read their own progress, admins can read all
      allow read: if isOwnerOrAdmin(resource.data.userId);

      // Users can create their own progress
      allow create: if isAuthenticated() &&
                       isOwner(request.resource.data.userId) &&
                       hasRequiredFields(['userId', 'skillId', 'sportId']);

      // Users can update their own progress, admins can update any
      allow update: if isOwnerOrAdmin(resource.data.userId);

      // Only admins can delete progress
      allow delete: if isAdmin();
    }

    // User Progress collection (overall stats) - users can access their own progress by userId
    match /user_progress/{userId} {
      // Users can read their own progress, admins can read all
      allow read: if isOwnerOrAdmin(userId);

      // Users can create their own progress
      allow create: if isAuthenticated() &&
                       isOwner(userId) &&
                       hasRequiredFields(['userId', 'overallStats']);

      // Users can update their own progress, admins can update any
      allow update: if isOwnerOrAdmin(userId);

      // Only admins can delete progress
      allow delete: if isAdmin();
    }

    // User Achievements collection
    match /user_achievements/{achievementId} {
      // Users can read their own achievements, admins can read all
      allow read: if isOwnerOrAdmin(resource.data.userId);

      // System/admins can create achievements for users
      allow create: if isAdmin() &&
                       hasRequiredFields(['userId', 'achievementId']);

      // System/admins can update achievements
      allow update: if isAdmin();

      // Only admins can delete achievements
      allow delete: if isAdmin();
    }

    // Achievements collection (achievement definitions)
    match /achievements/{achievementId} {
      // Anyone can read active achievements
      allow read: if resource.data.isActive == true || isAdmin();

      // Only admins can manage achievement definitions
      allow create: if isAdmin() &&
                       hasRequiredFields(['name', 'description', 'type', 'criteria', 'points']);

      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications, admins can read all
      allow read: if isOwnerOrAdmin(resource.data.userId);

      // System/admins can create notifications for users
      allow create: if isAdmin() &&
                       hasRequiredFields(['userId', 'type', 'title', 'message']) &&
                       isValidNotificationType(request.resource.data.type);

      // Users can update their own notifications (mark as read), admins can update any
      allow update: if isOwnerOrAdmin(resource.data.userId);

      // Users can delete their own notifications, admins can delete any
      allow delete: if isOwnerOrAdmin(resource.data.userId);
    }

    // Messages collection (admin-to-student messaging)
    match /messages/{messageId} {
      // Students can read messages sent to them, admins can read all messages
      allow read: if isAdmin() || (isAuthenticated() && resource.data.toUserId == getUserId());

      // Only admins can create messages
      // Check admin status from users collection since custom claims may not be set
      allow create: if isAuthenticated() &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                       hasRequiredFields(['fromUserId', 'toUserId', 'subject', 'message', 'type', 'isRead']) &&
                       request.resource.data.fromUserId == getUserId() &&
                       request.resource.data.subject is string &&
                       request.resource.data.subject.size() > 0 &&
                       request.resource.data.subject.size() <= 200 &&
                       request.resource.data.message is string &&
                       request.resource.data.message.size() > 0 &&
                       request.resource.data.message.size() <= 10000 &&
                       isValidMessageType(request.resource.data.type) &&
                       request.resource.data.attachments is list &&
                       request.resource.data.attachments.size() <= 3 &&
                       request.resource.data.isRead == false;

      // Only recipient can mark as read (update isRead and readAt fields only)
      allow update: if isAuthenticated() &&
                       resource.data.toUserId == getUserId() &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead', 'readAt', 'updatedAt']);

      // Only recipient can delete their own messages
      allow delete: if isAuthenticated() && resource.data.toUserId == getUserId();
    }

    // Content collection (articles, videos, etc.)
    match /content/{contentId} {
      // Anyone can read published content, admins can read all
      allow read: if (resource.data.isPublished == true &&
                     resource.data.get('publishedAt', timestamp('1970-01-01T00:00:00Z')) <= request.time) ||
                    isAdmin();

      // Only admins can manage content
      allow create: if isAdmin() &&
                       hasRequiredFields(['title', 'description', 'type', 'author']);

      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // App Settings collection - SECURE: Only admins can read system settings
    match /app_settings/{settingId} {
      // SECURITY FIX: Only admins can access system settings
      allow read: if isAdmin();

      // Only admins can update settings
      allow create, update, delete: if isAdmin();
    }

    // Analytics Events collection
    match /analytics_events/{eventId} {
      // Users can create their own events
      allow create: if isAuthenticated() &&
                       (request.resource.data.userId == getUserId() ||
                        !('userId' in request.resource.data));

      // Only admins can read analytics
      allow read: if isAdmin();

      // No updates or deletes allowed
      allow update, delete: if false;
    }

    // User Sessions collection
    match /user_sessions/{sessionId} {
      // Users can read their own sessions, admins can read all
      allow read: if isOwnerOrAdmin(resource.data.get('userId', ''));

      // Users can create their own sessions
      allow create: if isAuthenticated() &&
                       (request.resource.data.get('userId', '') == getUserId() ||
                        !('userId' in request.resource.data));

      // Users can update their own sessions
      allow update: if isAuthenticated() &&
                       (resource.data.get('userId', '') == getUserId() ||
                        !('userId' in resource.data));

      // Only admins can delete sessions
      allow delete: if isAdmin();
    }

    // Backup Info collection (system metadata)
    match /backup_info/{backupId} {
      // Only admins can manage backups
      allow read, create, update, delete: if isAdmin();
    }

    // Migration State collection (system metadata)
    match /migration_state/{migrationId} {
      // Only admins can manage migrations
      allow read, create, update, delete: if isAdmin();
    }

    // System Health collection (monitoring)
    match /system_health/{healthId} {
      // Only admins can manage system health
      allow read, create, update, delete: if isAdmin();
    }

    // Student Videos collection (video review system)
    match /student_videos/{videoId} {
      // Students can read their own videos, admins can read all
      allow read: if isOwnerOrAdmin(resource.data.studentId);

      // Students can list videos (filtered by query constraints in application)
      allow list: if isAuthenticated();

      // Students can create video records for themselves
      allow create: if isAuthenticated() &&
                       isOwner(request.resource.data.studentId) &&
                       hasRequiredFields(['studentId', 'studentName', 'studentEmail', 'videoUrl', 'storagePath', 'fileName', 'fileSize']);

      // Only admins can update video records (status, feedback, feedbackMessageId, etc.)
      allow update: if isAdmin();

      // Only admins can delete video records
      allow delete: if isAdmin();
    }

    // Video Quizzes collection - Interactive video-based quizzes
    match /video_quizzes/{quizId} {
      // PUBLIC: Anyone can read video quizzes for course discovery
      allow read: if true;

      // Only admins can manage video quizzes
      // Every video quiz MUST have both valid sportId AND skillId, plus videoUrl
      allow create: if isAdmin() &&
                       hasRequiredFields(['title', 'questions', 'settings', 'difficulty', 'isActive', 'createdBy', 'sportId', 'skillId', 'videoUrl', 'videoDuration']) &&
                       request.resource.data.title is string &&
                       request.resource.data.questions is list &&
                       request.resource.data.settings is map &&
                       request.resource.data.difficulty is string &&
                       request.resource.data.isActive is bool &&
                       request.resource.data.createdBy is string &&
                       request.resource.data.sportId is string &&
                       request.resource.data.sportId.size() > 0 &&
                       request.resource.data.skillId is string &&
                       request.resource.data.skillId.size() > 0 &&
                       request.resource.data.videoUrl is string &&
                       request.resource.data.videoUrl.size() > 0 &&
                       request.resource.data.videoDuration is number &&
                       request.resource.data.videoDuration >= 0 &&
                       exists(/databases/$(database)/documents/sports/$(request.resource.data.sportId)) &&
                       exists(/databases/$(database)/documents/skills/$(request.resource.data.skillId));

      allow update: if isAdmin() &&
                       (request.resource.data.sportId == resource.data.sportId ||
                        (request.resource.data.sportId is string &&
                         request.resource.data.sportId.size() > 0 &&
                         exists(/databases/$(database)/documents/sports/$(request.resource.data.sportId)))) &&
                       (request.resource.data.skillId == resource.data.skillId ||
                        (request.resource.data.skillId is string &&
                         request.resource.data.skillId.size() > 0 &&
                         exists(/databases/$(database)/documents/skills/$(request.resource.data.skillId))));
      allow delete: if isAdmin();
    }

    // Video Quiz Progress collection - Student progress through video quizzes
    match /video_quiz_progress/{progressId} {
      // Users can read their own progress, admins can read all
      allow read: if isOwnerOrAdmin(resource.data.userId);

      // Users can create their own progress
      allow create: if isAuthenticated() &&
                       isOwner(request.resource.data.userId) &&
                       hasRequiredFields(['userId', 'videoQuizId', 'skillId', 'sportId']);

      // Users can update their own progress, admins can update any
      allow update: if isOwnerOrAdmin(resource.data.userId);

      // Only admins can delete progress
      allow delete: if isAdmin();
    }

    // REMOVED: Courses collection (since sports ARE the courses)
    // No separate /courses collection needed

    // Catch-all rule for any other collections
    match /{document=**} {
      // Deny all access to undefined collections
      allow read, write: if false;
    }
  }
}